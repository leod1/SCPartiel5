enum PricingStrategyType {
    REGULAR = "REGULAR",
    VIP = "VIP",
    BUSINESS = "BUSINESS"
}

interface PricingStrategy {
    applyDiscount(price: number): number;
}

class RegularPricing implements PricingStrategy {
    applyDiscount(price: number): number {
        return price;
    }
}

class VipPricing implements PricingStrategy {
    applyDiscount(price: number): number {
        return price * 0.8;
    }
}

class BusinessPricing implements PricingStrategy {
    applyDiscount(price: number): number {
        return price * 0.9;
    }
}

class PricingStrategyFactory {
    static getStrategy(strategyType: PricingStrategyType): PricingStrategy {
        switch (strategyType) {
            case PricingStrategyType.VIP:
                return new VipPricing();
            case PricingStrategyType.BUSINESS:
                return new BusinessPricing();
            case PricingStrategyType.REGULAR:
            default:
                return new RegularPricing();
        }
    }
}

class Package {
    constructor(public weight: number, public distance: number) {
        if (weight < 0) {
            throw new Error("Invalid weight!");
        }
    }

    calculateBasePrice(): number {
        let base = this.distance * 0.1;

        if (this.weight > 10) {
            base += 5;
        } else if (this.weight > 5) {
            base += 3;
        }

        return base;
    }
}

class DeliveryService {
    constructor(private pricingStrategy: PricingStrategy) {}

    calculateDeliveryPrice(packages: Package[], urgent: boolean): number {
        let total = packages.reduce((sum, pkg) => {
            let price = pkg.calculateBasePrice();
            if (urgent) {
                price *= 1.5;
            }
            return sum + price;
        }, 0);

        if (packages.length > 3) {
            total *= 0.95;
        }

        return this.pricingStrategy.applyDiscount(total);
    }
}

class InvoiceService {
    printInvoice(deliveryService: DeliveryService, packages: Package[]): void {
        const price = deliveryService.calculateDeliveryPrice(packages, false);
        console.log(`Total: ${price}`);
        if (price > 100) {
            console.log("Apply special discount next time!");
        }
    }
}
const packages = [new Package(8, 100), new Package(15, 50), new Package(3, 200)];
const pricingStrategy = PricingStrategyFactory.getStrategy(PricingStrategyType.VIP);
const deliveryService = new DeliveryService(pricingStrategy);
const invoiceService = new InvoiceService();

invoiceService.printInvoice(deliveryService, packages);